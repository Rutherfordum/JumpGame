//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Jump Game Project/Scripts/Input Actions/UserInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputAction"",
    ""maps"": [
        {
            ""name"": ""PlayerSwipe"",
            ""id"": ""7e784161-9ada-47ad-816c-7bd213e8b6ef"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""27befc67-7afc-4867-b1d9-86bbdbed3182"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""8b8bfd7b-c552-4d59-bbbf-e9ad02ea3c9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": ""Clamp"",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc5efa8a-a359-4fdc-afcc-4c71385c1915"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""UserInputSwipe"",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e7d6f50-a943-4be1-b9c2-954cad5f1809"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""UserInputSwipe"",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""UserInputSwipe"",
            ""bindingGroup"": ""UserInputSwipe"",
            ""devices"": []
        }
    ]
}");
        // PlayerSwipe
        m_PlayerSwipe = asset.FindActionMap("PlayerSwipe", throwIfNotFound: true);
        m_PlayerSwipe_TouchPosition = m_PlayerSwipe.FindAction("TouchPosition", throwIfNotFound: true);
        m_PlayerSwipe_TouchPress = m_PlayerSwipe.FindAction("TouchPress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerSwipe
    private readonly InputActionMap m_PlayerSwipe;
    private IPlayerSwipeActions m_PlayerSwipeActionsCallbackInterface;
    private readonly InputAction m_PlayerSwipe_TouchPosition;
    private readonly InputAction m_PlayerSwipe_TouchPress;
    public struct PlayerSwipeActions
    {
        private @UserInputAction m_Wrapper;
        public PlayerSwipeActions(@UserInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPosition => m_Wrapper.m_PlayerSwipe_TouchPosition;
        public InputAction @TouchPress => m_Wrapper.m_PlayerSwipe_TouchPress;
        public InputActionMap Get() { return m_Wrapper.m_PlayerSwipe; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerSwipeActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerSwipeActions instance)
        {
            if (m_Wrapper.m_PlayerSwipeActionsCallbackInterface != null)
            {
                @TouchPosition.started -= m_Wrapper.m_PlayerSwipeActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_PlayerSwipeActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_PlayerSwipeActionsCallbackInterface.OnTouchPosition;
                @TouchPress.started -= m_Wrapper.m_PlayerSwipeActionsCallbackInterface.OnTouchPress;
                @TouchPress.performed -= m_Wrapper.m_PlayerSwipeActionsCallbackInterface.OnTouchPress;
                @TouchPress.canceled -= m_Wrapper.m_PlayerSwipeActionsCallbackInterface.OnTouchPress;
            }
            m_Wrapper.m_PlayerSwipeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @TouchPress.started += instance.OnTouchPress;
                @TouchPress.performed += instance.OnTouchPress;
                @TouchPress.canceled += instance.OnTouchPress;
            }
        }
    }
    public PlayerSwipeActions @PlayerSwipe => new PlayerSwipeActions(this);
    private int m_UserInputSchemeIndex = -1;
    public InputControlScheme UserInputScheme
    {
        get
        {
            if (m_UserInputSchemeIndex == -1) m_UserInputSchemeIndex = asset.FindControlSchemeIndex("UserInputSwipe");
            return asset.controlSchemes[m_UserInputSchemeIndex];
        }
    }
    public interface IPlayerSwipeActions
    {
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouchPress(InputAction.CallbackContext context);
    }
}
